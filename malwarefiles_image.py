import os
import numpy as np
from PIL import Image

def convert_binary_to_grayscale(input_folder, output_folder, image_size=(256, 256)):
   
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for file_name in os.listdir(input_folder):
        file_path = os.path.join(input_folder, file_name)
        if os.path.isfile(file_path):
            with open(file_path, 'rb') as f:
                binary_data = f.read()

            # convert binary data to a numpy array of bytes
            byte_array = np.frombuffer(binary_data, dtype=np.uint8)

            # calculate the side length of a square image for simplicity
            total_bytes = len(byte_array)
            side_length = int(np.ceil(np.sqrt(total_bytes)))

            # pad the byte array to fit into the square image
            padded_byte_array = np.pad(byte_array, (0, side_length**2 - total_bytes), mode='constant')

            # rshape into a square matrix
            image_matrix = padded_byte_array.reshape((side_length, side_length))

            # resize the image to the desired size
            image = Image.fromarray(image_matrix)
            image = image.resize(image_size)

            # save the grayscale image
            output_path = os.path.join(output_folder, f"{os.path.splitext(file_name)[0]}.png")
            image.save(output_path)

            print(f"Processed and saved: {output_path}")

# Example usage
input_folder = "path_to_your_binary_files_dataset"
output_folder = "path_to_save_grayscale_images"
convert_binary_to_grayscale(input_folder, output_folder, image_size=(256, 256))
